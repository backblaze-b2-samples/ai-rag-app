"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import logging.config
import os
from pathlib import Path

from langchain import globals as langchain_globals
from langchain_google_genai import ChatGoogleGenerativeAI, GoogleGenerativeAIEmbeddings
from langchain_openai import ChatOpenAI, OpenAIEmbeddings

from ai_rag_app.rag import RAG
from ai_rag_app.types import CollectionSpec, ModelSpec, LLMSpec

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-agg6&-%(fcgvcv&gk16oxdq5x7bi=wjevix^ugs6y9^d9a2-cw'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['.localhost', '127.0.0.1', '[::1]', '.trycloudflare.com', '172.16.60.26']


# Application definition

INSTALLED_APPS = [
    'ai_rag_app.apps.AiRagAppConfig',

    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Django REST framework configuration
REST_FRAMEWORK = {
    # We're not using the database, so we don't need a user object to represent the unauthenticated user
    'UNAUTHENTICATED_USER' : None
}

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Just use the cache for sessions - no database
SESSION_ENGINE = "django.contrib.sessions.backends.cache"

# Local memory cache, since we're only deploying a single node
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.locmem.LocMemCache",
    }
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING_CONFIG = None
logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': '%(asctime)s %(name)-12s %(levelname)-8s %(message)s',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'console',
        },
    },
    'loggers': {
        '': {
            'level': 'WARNING',
            'handlers': ['console'],
        },
        'ai_rag_app': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
    },
})

# Debugging output for libraries
langchain_globals.set_debug(os.getenv('LANGCHAIN_DEBUG', default=False))

if os.getenv('PYARROW_TRACE_S3', default=False):
    from pyarrow import fs
    from pyarrow._s3fs import initialize_s3  # noqa
    initialize_s3(fs.S3LogLevel.Trace)



# huey task queue integration with Django
HUEY = {
    'huey_class': 'huey_django_orm.storage.DjangoORMHuey',
    'immediate': False,
}

# App config
TOPIC = "Backblaze products"

CHAT_MODEL: ModelSpec = {
    'name': 'OpenAI',
    'llm': {
        'cls': ChatOpenAI,
        'init_args': {
            'model': "gpt-4o-mini",
        }
    },
}

# Change source_pdf_location and vector_store_location to match your environment
COLLECTION: CollectionSpec = {
    'name': 'Docs',
    'source_pdf_location': 's3://metadaddy-langchain-demo/pdfs',
    'vector_store_location': 's3://metadaddy-langchain-demo/vectordb/docs/openai',
    'embeddings': {
        'cls': OpenAIEmbeddings,
        'init_args': {
            'model': "text-embedding-3-large",
        },
    },
}

# We only want to initialize the RAG instance when we're being started by runserver (RUN_MAIN)
# or gunicorn (SERVER_SOFTWARE) and not by loadcsv, loadpdf etc
if os.environ.get('RUN_MAIN') or os.environ.get('SERVER_SOFTWARE'):
    RAG_INSTANCE = RAG(COLLECTION, CHAT_MODEL)

TEXT_SPLITTER_CHUNK_OVERLAP = 200
TEXT_SPLITTER_CHUNK_SIZE = 1000
